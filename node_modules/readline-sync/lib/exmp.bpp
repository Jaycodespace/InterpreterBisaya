 function handleConditionals(node, env, output) {
    for (const branch of node.branches) {
      if (branch.type === 'IF' || branch.type === 'ELSE_IF') {
        const condition = evaluateTokens(tokenizeExpression(branch.condition), env);
        if (condition) {
          const bodyAst = parse(tokenize(branch.body.join('\n')));
          const result = run(bodyAst, env);
          output.push(...result);
          break;
        }
      } else if (branch.type === 'ELSE') {
        const bodyAst = parse(tokenize(branch.body.join('\n')));
        const result = run(bodyAst, env);
        output.push(...result);
        break;
      }
    }
  }


function parseConditional(lines, startIndex) {
  const branches = [];
  let i = startIndex;

  while (i < lines.length) {
    let line = lines[i].trim();

    if (line.startsWith('KUNG DILI')) {
      const cond = line.match(/\(([^)]+)\)/);
      if (!cond) throw new Error(`Invalid KUNG DILI condition`);
      const { body, nextIndex } = parseBlock(lines, i + 1);
      branches.push({ type: 'ELSE_IF', condition: cond[1], body });
      i = nextIndex;
    } else if (line.startsWith('KUNG WALA')) {
      const { body, nextIndex } = parseBlock(lines, i + 1);
      branches.push({ type: 'ELSE', body });
      i = nextIndex;
    } else if (line.startsWith('KUNG')) {
      const cond = line.match(/\(([^)]+)\)/);
      if (!cond) throw new Error(`Invalid KUNG condition`);
      const { body, nextIndex } = parseBlock(lines, i + 1);
      branches.push({ type: 'IF', condition: cond[1], body });
      i = nextIndex;
    } else {
      break;
    }
  }

  return { node: { type: 'CONDITIONAL', branches }, nextIndex: i };
}
  